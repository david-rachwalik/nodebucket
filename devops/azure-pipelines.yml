# Build a Node.js server and deploy to Azure App Service (Linux)
# - tech stack: Angular, Node.js, Express

trigger:
  - main

variables:
  vmImageName: 'ubuntu-latest' # agent VM image name
  nodeVersion: '16'
  runtimeStack: 'NODE|16-lts' # use LTS for Production
  subscriptionName: 'Pay-As-You-Go' # Pipeline connection (ARM)
  location: 'southcentralus' # 'eastus'
  resourceGroupName: 'rg-dev-southcentralus'
  appServiceName: 'nodebucket' # web app name
  artifactName: 'drop'
  environmentName: 'Production'

# Analyze code, save build artifacts, and deploy
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript
stages:
  - stage: 'Build'
    displayName: 'Build stage'
    jobs:
      - job: 'Build'
        displayName: 'Build'
        pool:
          vmImage: $(vmImageName)
        steps:
          # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/cmd-line-v2
          - script: |
              echo Hello world
              pwd
            # pwd -> /home/vsts/work/1/s
            displayName: 'Print working directory'

          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)

          - script: |
              cd client-angular
              npm install
            displayName: 'Install app dependencies'

          - script: |
              cd client-angular
              npm run build
            displayName: 'Build app (prod)'

          # - script: npm run test --if-present
          #   displayName: 'Test app'

          - script: ls
            displayName: 'List contents of working directory'

          - script: ls client-angular
            displayName: 'List contents of client directory'

          # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files
          - task: CopyFiles@2
            displayName: 'Copy files to staging'
            inputs:
              contents: |
                server/**
                client-angular/dist/**
                *
                !*.git*
                !*.cjs
              targetFolder: $(System.DefaultWorkingDirectory)/_$(artifactName)

          # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/archive-files-v2
          - task: ArchiveFiles@2
            displayName: 'Archive files in staging'
            inputs:
              rootFolderOrFile: $(System.DefaultWorkingDirectory)/_$(artifactName)
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - task: CopyFiles@2
            displayName: 'Copy deployment to staging'
            inputs:
              contents: |
                devops/azuredeploy.json
                devops/azuredeploy.parameters.json
              targetFolder: $(Build.ArtifactStagingDirectory)

          # ------------------------ Artifact Publish Steps ------------------------
          # Provide files to next stage
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts
          - task: PublishBuildArtifacts@1
            displayName: 'Publish build artifact: $(artifactName)'
            inputs:
              pathtoPublish: $(Build.ArtifactStagingDirectory)
              artifactName: $(artifactName)

          - script: ls $(Build.ArtifactStagingDirectory)
            displayName: 'List contents of staging directory'

  - stage: 'Deploy'
    displayName: 'Deploy stage'
    dependsOn: 'Build'
    condition: succeeded()
    jobs:
      - deployment: 'Deploy'
        displayName: 'Deploy'
        environment: $(environmentName)
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                # Already handled automatically by Pipeline
                # # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/download-build-artifacts-v1
                # - task: DownloadBuildArtifacts@1
                #   inputs:
                #     buildType: 'current'
                #     downloadType: 'single'
                #     artifactName: '$(artifactName)'
                #     downloadPath: '$(System.ArtifactsDirectory)'

                # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/cmd-line-v2
                - task: CmdLine@2
                  displayName: 'Print pipeline directory'
                  inputs:
                    script: |
                      echo --- $(Pipeline.Workspace) ---
                      ls $(Pipeline.Workspace)
                      echo --- $(Pipeline.Workspace)/$(artifactName) ---
                      ls $(Pipeline.Workspace)/$(artifactName)
                      echo ---
                      echo $(Build.ArtifactStagingDirectory)
                      echo $(System.DefaultWorkingDirectory)
                  # pwd -> /home/vsts/work/1/s
                  # $(Pipeline.Workspace) -> /home/vsts/work/1
                  # $(Build.ArtifactStagingDirectory) -> /home/vsts/work/1/a
                  # $(System.DefaultWorkingDirectory) -> /home/vsts/work/1/s

                - task: AzureResourceGroupDeployment@2
                  displayName: 'Deploy ARM template'
                  inputs:
                    azureSubscription: $(subscriptionName)
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    csmFile: $(Pipeline.Workspace)/$(artifactName)/devops/azuredeploy.json
                    csmParametersFile: $(Pipeline.Workspace)/$(artifactName)/devops/azuredeploy.parameters.json

                # https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/azure-web-app-v1
                - task: AzureWebApp@1
                  displayName: 'Deploy web app'
                  inputs:
                    azureSubscription: $(subscriptionName)
                    appType: 'webAppLinux' # webApp|webAppLinux
                    appName: $(appServiceName)
                    package: $(Pipeline.Workspace)/$(artifactName)/$(Build.BuildId).zip
                    runtimeStack: $(runtimeStack)
                    startUpCommand: 'npm start'
                    deploymentMethod: 'auto'
