# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - main

variables:
  vmImageName: 'ubuntu-latest' # agent VM image name
  nodeVersion: '16' # '14.x'
  runtimeStack: 'NODE|16'
  subscriptionName: 'Pay-As-You-Go' # Pipeline connection (ARM)
  appServiceName: 'webapp-nodebucket' # web app name
  # webApp (default), api, functionApp, dockerContainer, aspnetcore
  # webAppLinux, node, aspnetcore, python, java, ruby, tomcat
  # appServiceType: 'node' # webAppLinux for general Linux web app
  environmentName: 'Production'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: CmdLine@2
            displayName: 'Print working directory'
            inputs:
              script: |
                echo Write your commands here
                pwd
                echo Hello world
            # pwd -> /home/vsts/work/1/s

          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)

          # - script: |
          #     npm install
          #     npm run build:prod
          #   # npm run test --if-present
          #   # npm run test --if-present --no-watch --silent
          #   displayName: 'npm install, build and test'

          - script: |
              npm install
            displayName: 'Install app dependencies'

          - script: |
              npm run build
            displayName: 'Build app (prod)'

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: Deploy
        environment: $(environmentName)
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: CmdLine@2
                  displayName: 'Print working directory'
                  inputs:
                    script: |
                      echo Write your commands here
                      pwd
                      echo Hello world
                  # pwd -> /home/vsts/work/1/s

                - task: AzureWebApp@1
                  displayName: 'Azure Web App Deploy: '
                  inputs:
                    azureSubscription: $(subscriptionName)
                    appName: $(appServiceName)
                    # appType: '$(appServiceType)'
                    appType: 'webAppLinux' # webApp|webAppLinux
                    runtimeStack: '$(runtimeStack)'
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
                    startUpCommand: 'npm start'
                    # ensure fully loaded and ready to serve requests before deployment is complete
                    # additionalDeploymentOptions: '--warmup-path /'

  # F1 (free) tier doesn't support deployment slots, cannot use deployment swaps with zero downtime
  # can provide '--warmup-path' to AzureWebApp@1 task to reduce downtime

  # While this can help to reduce downtime, there are a few downsides to using it:
  # - Increased deployment time: Since the application is warmed up after deployment, the deployment time may be longer.
  # - Increased load on the application: If a large number of requests are made to the warmup path, it can put additional load on the application, potentially impacting its performance.
  # - Increased data transfer: Since requests are being made to warm up the application, there may be additional data transfer costs associated with the deployment.
  # - Possible issues with caching: If the warmup path is not properly configured, it may not be properly cached, resulting in additional requests being made to the application after deployment.
